Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># import modules\r\nfrom shapely.geometry import Polygon\r\nfrom shapely.geometry import Point\r\nimport rasterio\r\nfrom rasterio import features\r\nfrom rasterio.windows import Window\r\nfrom rasterio import plot\r\nimport numpy as np\r\nimport json\r\nimport os\r\nfrom rtree import index\r\n\r\n# # Task 1 - User input\r\n#\r\n# x_cord = int(input(\"please enter a numeric easting coordinate value between 430000 - 465000: \"))\r\n# y_cord = int(input(\"please enter a numeric Northing coordinate value between 80000 - 95000: \"))\r\n#\r\n# while y_cord < 80000 or y_cord > 95000 or x_cord < 430000 or x_cord > 465000:\r\n#     x_cord = int(input(\"Insufficent Easting coordinate. Please enter a numeric easting coordinate value between 430000 - 465000: \"))\r\n#     y_cord = int(input(\"Insufficent Northing coordinate.Please enter a numeric Northing coordinate value between 80000 - 95000: \"))\r\n# else:\r\n#     print(\"Your location \", x_cord, \" Easting and \", y_cord, \" Northing is within the northing and easting bounds \")\r\n#\r\n# point = Point(x_cord,y_cord)\r\n#\r\n# # test point to copy and paste   435000,85000\r\n#\r\n# # Task 2 Highest Point Identification - Identify the highest point within a 5km radius from the user location.\r\n#\r\n# # read in elevation_matrix data file\r\n#\r\n# elevation_file = rasterio.open(\"Material/elevation/SZ.asc\")\r\n# elevation_matrix = elevation_file.read(1)\r\n# elevation_file_bounds = elevation_file.bounds\r\n# elevation_shape = elevation_matrix.shape\r\n#\r\n# # define the bounds of the elevation_file (this info is given in elevation_file_bounds variable)\r\n# w_lim = 425000\r\n# n_lim = 100000\r\n# s_lim = 75000\r\n# e_lim = 470000\r\n#\r\n#\r\n# # create a 5km buffer around the inputted point object\r\n#\r\n# buffer = point.buffer(5000)\r\n#\r\n# #apply affine transformation to map pixel/cell locations to spatial positions\r\n#\r\n# affine_tr = rasterio.transform.from_bounds(w_lim, s_lim,\r\n#                                e_lim, n_lim,\r\n#                                elevation_shape[1], elevation_shape[0])\r\n#\r\n# # Converting a buffer vector geometry into raster  where cells are ones (inside 5km buffer)\r\n# # or zeros (outside 5km buffer)\r\n#\r\n# buffer_raster = rasterio.features.rasterize([(buffer, 1)], out_shape = elevation_shape,\r\n#                                                 transform= affine_tr)\r\n#\r\n# # convert buffer matrix into boolean data type\r\n# buffer_bool = buffer_raster.astype(bool)\r\n#\r\n# #invert buffer_bool matrix\r\n# buffer_bool_inv = ~buffer_bool\r\n#\r\n# # clip elevation_matrix array using buffer array\r\n# clipped_elevation_matrix = elevation_matrix.copy()\r\n# clipped_elevation_matrix[buffer_bool_inv] = np.nan\r\n#\r\n# # find maximum height in the buffer\r\n#\r\n# row_idx, col_idx = np.unravel_index(np.nanargmax(clipped_elevation_matrix,),\r\n#                                      elevation_shape)\r\n#\r\n# # return highest point in meters in 5km buffer region\r\n#\r\n# max_elevation = elevation_matrix[row_idx, col_idx]\r\n#\r\n# # retrieve  the British national grid coordinates of the pixel containing the maximum elevation_matrix inside the buffer region\r\n#\r\n# x_max_cord, y_max_cord = elevation_file.xy(row_idx, col_idx)\r\n#\r\n# # create a point object  and list of highest point inside 5km buffer\r\n#\r\n# highest_point = Point(x_max_cord, y_max_cord)\r\n# highest_point_cord = [x_max_cord,y_max_cord]\r\n#\r\n\r\n\r\n# TASK 3 - Nearest Integrated Transport Network\r\n# test point to copy and paste   435000,85000\r\n# highest point for test point  439007.5 85192.5 #( test points can be deleted when completed)\r\nhighest_point_cord = [439007.5, 85192.5] #( test points can be deleted when completed)\r\npoint = Point(435000, 85000)  #( test points can be deleted when completed)\r\n\r\n# load itn file\r\nitn_json = os.path.join(\"Material/itn/solent_itn.json\")\r\nwith open(itn_json, 'r') as f:\r\n    itn_json = json.load(f)\r\n\r\nroad_nodes = itn_json['roadnodes']\r\nnode_coord = []\r\n\r\n# initialize rtree\r\nidx = index.Index()\r\n\r\n# inserting coordinates,fid into rtree\r\nid_list = []\r\nfor i, (coord_id, coords) in enumerate(road_nodes.items()):\r\n    node_co = (coords['coords'])\r\n    id_list.append(coord_id)\r\n    idx.insert(i, (node_co[0], node_co[1], node_co[0], node_co[1]), coord_id)\r\n\r\n\r\n# Query to find  the nearest fid for the highest point\r\n# fid for highest test point osgb4000000026227672\r\nfor i in idx.nearest((highest_point_cord), 1):\r\n    highest_node = id_list[i]\r\n    print(highest_node)\r\n\r\n# Query to find  the nearest fid for the users point\r\n# fid for  user test point osgb4000000026141631\r\nfor i in idx.nearest((point.x,point.y), 1):\r\n    user_node = id_list[i]\r\n    print(user_node)\r\n\r\n#Task  4:  Shortest  Path\r\n\r\n#load Json road links\r\n#load json roadnodes\r\n#create network graph\r\n\r\n# REFERENCES:\r\n\r\n# https://numpy.org/doc/stable/reference/generated/numpy.argmax.html\r\n# https://rasterio.readthedocs.io/en/latest/api/rasterio.transform.html\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.py	(revision b2fc7b6ee7246fa03fdd8bd597757b0aaf45f6d5)
+++ main.py	(date 1609068408781)
@@ -128,7 +128,7 @@
 
 #load Json road links
 #load json roadnodes
-#create network graph
+#create network graph - shortest distance between start node ,
 
 # REFERENCES:
 
